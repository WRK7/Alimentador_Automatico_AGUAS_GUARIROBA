import re
import os
import glob
from datetime import datetime
from playwright.sync_api import Playwright, sync_playwright, expect
import time

class AlimentadorAutomatico:
    def __init__(self):
        self.url = "https://portesmarinho.alimentador.vonixcc.com.br/session/new"
        self.usuario = "portes"
        self.senha = "portes1234"
        self.browser = None
        self.context = None
        self.page = None
    
    def iniciar_navegador(self, headless=False):
        """Inicia o navegador e abre a p√°gina"""
        print("üöÄ Iniciando navegador...")
        playwright = sync_playwright().start()
        self.browser = playwright.chromium.launch(headless=headless)
        self.context = self.browser.new_context()
        self.page = self.context.new_page()
        
        print(f"üåê Acessando: {self.url}")
        self.page.goto(self.url)
        print("‚úÖ P√°gina carregada com sucesso!")
    
    def fazer_login(self):
        """Realiza o login no sistema"""
        print("üîê Realizando login...")
        
        try:
            # Preencher usu√°rio
            print("  üìù Preenchendo usu√°rio...")
            self.page.locator("#username").click()
            self.page.locator("#username").fill(self.usuario)
            
            # Preencher senha
            print("  üîë Preenchendo senha...")
            self.page.get_by_role("textbox", name="Senha").click()
            self.page.get_by_role("textbox", name="Senha").fill(self.senha)
            
            # Clicar em entrar
            print("  üéØ Clicando em 'Entrar'...")
            self.page.get_by_role("button", name="Entrar").click()
            
            # Aguardar carregamento da p√°gina ap√≥s login
            print("  ‚è≥ Aguardando carregamento...")
            time.sleep(3)
            
            print("‚úÖ Login realizado com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante o login: {e}")
            return False
    
    def encontrar_botao_importar(self):
        """Encontra e clica no bot√£o 'Importar'"""
        print("üîç Procurando bot√£o 'Importar'...")
        
        try:
            # Seletor efetivo identificado no log
            print("  üîé Usando seletor: a:has-text('Importar')")
            botao = self.page.locator("a:has-text('Importar')")
            
            if botao.count() > 0:
                print("  ‚úÖ Bot√£o encontrado!")
                botao.click()
                print("‚úÖ Bot√£o 'Importar' clicado com sucesso!")
                return True
            else:
                print("‚ùå Bot√£o 'Importar' n√£o encontrado")
                return False
            
        except Exception as e:
            print(f"‚ùå Erro ao procurar bot√£o 'Importar': {e}")
            return False
    
    def diagnosticar_dropdown(self):
        """Diagnostica o tipo de dropdown e suas propriedades"""
        print("üî¨ DIAGN√ìSTICO DO DROPDOWN")
        print("=" * 40)
        
        try:
            # Procurar o dropdown de fila
            dropdown = self.page.locator("#shipment_queue_id")
            
            if dropdown.count() == 0:
                print("‚ùå Dropdown n√£o encontrado!")
                return False
            
            print("‚úÖ Dropdown encontrado!")
            
            # Analisar propriedades do elemento
            print("\nüìã PROPRIEDADES DO ELEMENTO:")
            print(f"  Tag: {dropdown.evaluate('el => el.tagName')}")
            print(f"  Tipo: {dropdown.get_attribute('type')}")
            print(f"  Classe: {dropdown.get_attribute('class')}")
            print(f"  ID: {dropdown.get_attribute('id')}")
            print(f"  Name: {dropdown.get_attribute('name')}")
            print(f"  Disabled: {dropdown.get_attribute('disabled')}")
            print(f"  Readonly: {dropdown.get_attribute('readonly')}")
            
            # Verificar se √© um select nativo
            tag_name = dropdown.evaluate('el => el.tagName')
            if tag_name.upper() == "SELECT":
                print("\n‚úÖ √â um SELECT nativo!")
                return self.analisar_select_nativo(dropdown)
            else:
                print(f"\n‚ö†Ô∏è  N√£o √© um SELECT nativo! Tag: {tag_name}")
                return self.analisar_dropdown_customizado(dropdown)
                
        except Exception as e:
            print(f"‚ùå Erro no diagn√≥stico: {e}")
            return False
    
    def analisar_select_nativo(self, dropdown):
        """Analisa um select nativo"""
        print("\nüîç ANALISANDO SELECT NATIVO:")
        
        try:
            # Contar op√ß√µes
            opcoes = dropdown.locator("option")
            total_opcoes = opcoes.count()
            print(f"  üìä Total de op√ß√µes: {total_opcoes}")
            
            # Listar algumas op√ß√µes
            print("\nüìã PRIMEIRAS 10 OP√á√ïES:")
            for i in range(min(10, total_opcoes)):
                try:
                    opcao = opcoes.nth(i)
                    texto = opcao.text_content().strip()
                    valor = opcao.get_attribute("value")
                    print(f"  {i+1:2d}. '{texto}' (value='{valor}')")
                except:
                    print(f"  {i+1:2d}. [Erro ao ler op√ß√£o]")
            
            if total_opcoes > 10:
                print(f"  ... e mais {total_opcoes - 10} op√ß√µes")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao analisar select: {e}")
            return False
    
    def analisar_dropdown_customizado(self, dropdown):
        """Analisa um dropdown customizado"""
        print("\nüîç ANALISANDO DROPDOWN CUSTOMIZADO:")
        
        try:
            # Tentar clicar para abrir
            print("  üñ±Ô∏è  Tentando abrir dropdown...")
            dropdown.click()
            time.sleep(2)
            
            # Procurar por elementos que possam ser op√ß√µes
            seletores_opcoes = [
                "option",
                "[role='option']",
                ".option",
                ".dropdown-item",
                ".select-option",
                "li",
                "div[data-value]",
                "span[data-value]"
            ]
            
            for seletor in seletores_opcoes:
                opcoes = self.page.locator(seletor)
                count = opcoes.count()
                if count > 0:
                    print(f"  ‚úÖ Encontradas {count} op√ß√µes com seletor: {seletor}")
                    
                    # Listar algumas op√ß√µes
                    print(f"  üìã PRIMEIRAS 5 OP√á√ïES ({seletor}):")
                    for i in range(min(5, count)):
                        try:
                            opcao = opcoes.nth(i)
                            texto = opcao.text_content().strip()
                            valor = opcao.get_attribute("value") or opcao.get_attribute("data-value") or "N/A"
                            print(f"    {i+1}. '{texto}' (value='{valor}')")
                        except:
                            print(f"    {i+1}. [Erro ao ler op√ß√£o]")
                    break
            else:
                print("  ‚ùå Nenhuma op√ß√£o encontrada com seletores conhecidos")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao analisar dropdown customizado: {e}")
            return False
    
    def selecionar_fila_ura_aguas(self):
        """Seleciona a fila 'URA-AGUAS' no dropdown"""
        print("üìã Selecionando fila 'URA-AGUAS'...")
        
        try:
            # Aguardar carregamento
            print("  ‚è≥ Aguardando carregamento da p√°gina...")
            time.sleep(2)
            
            # Fazer diagn√≥stico primeiro
            if not self.diagnosticar_dropdown():
                return False
            
            print("\n" + "=" * 40)
            print("üéØ TENTANDO SELECIONAR URA-AGUAS...")
            print("=" * 40)
            
            # Aqui vamos implementar a l√≥gica baseada no diagn√≥stico
            # Por enquanto, vamos tentar o m√©todo original
            return self.tentar_selecao_original()
                
        except Exception as e:
            print(f"‚ùå Erro ao selecionar fila: {e}")
            return False
    
    def tentar_selecao_original(self):
        """Tenta a sele√ß√£o usando m√©todos espec√≠ficos para SELECT nativo"""
        try:
            dropdown = self.page.locator("#shipment_queue_id")
            
            print("  üéØ Tentando sele√ß√£o por value...")
            # M√©todo 1: Selecionar por value usando select_option
            try:
                dropdown.select_option(value="10")
                time.sleep(1)
                
                # Verificar se foi selecionada
                valor_selecionado = dropdown.input_value()
                if valor_selecionado == "10":
                    print("  ‚úÖ Selecionada com sucesso por value!")
                    return True
                else:
                    print(f"  ‚ùå Falha na sele√ß√£o por value. Valor atual: '{valor_selecionado}'")
            except Exception as e:
                print(f"  ‚ùå Erro na sele√ß√£o por value: {e}")
            
            print("  üéØ Tentando sele√ß√£o por texto...")
            # M√©todo 2: Selecionar por texto
            try:
                dropdown.select_option(label="URA-AGUAS")
                time.sleep(1)
                
                # Verificar se foi selecionada
                valor_selecionado = dropdown.input_value()
                if valor_selecionado == "10":
                    print("  ‚úÖ Selecionada com sucesso por texto!")
                    return True
                else:
                    print(f"  ‚ùå Falha na sele√ß√£o por texto. Valor atual: '{valor_selecionado}'")
            except Exception as e:
                print(f"  ‚ùå Erro na sele√ß√£o por texto: {e}")
            
            print("  üéØ Tentando sele√ß√£o por √≠ndice...")
            # M√©todo 3: Encontrar o √≠ndice e selecionar
            try:
                opcoes = dropdown.locator("option")
                total_opcoes = opcoes.count()
                
                for i in range(total_opcoes):
                    opcao = opcoes.nth(i)
                    texto = opcao.text_content().strip()
                    valor = opcao.get_attribute("value")
                    
                    if "URA-AGUAS" in texto.upper():
                        print(f"  üéØ Encontrada no √≠ndice {i}: '{texto}' (value='{valor}')")
                        
                        # Selecionar por √≠ndice
                        dropdown.select_option(index=i)
                        time.sleep(1)
                        
                        # Verificar sele√ß√£o
                        valor_selecionado = dropdown.input_value()
                        if valor_selecionado == valor:
                            print(f"  ‚úÖ Selecionada com sucesso por √≠ndice!")
                            return True
                        else:
                            print(f"  ‚ùå Falha na sele√ß√£o por √≠ndice. Valor atual: '{valor_selecionado}'")
                        break
            except Exception as e:
                print(f"  ‚ùå Erro na sele√ß√£o por √≠ndice: {e}")
            
            print("  ‚ùå Todos os m√©todos de sele√ß√£o falharam")
            return False
            
        except Exception as e:
            print(f"‚ùå Erro na sele√ß√£o: {e}")
            return False
    
    def listar_arquivos_processados(self):
        """Lista os arquivos processados dispon√≠veis"""
        print("üìÅ Procurando arquivos processados...")
        
        # Pasta de destino espec√≠fica
        pasta_destino = r"S:\BACKOFFICE\Controle de Discadores e Uras\Uras\URA AGUAS BASE TODA"
        
        if not os.path.exists(pasta_destino):
            print(f"‚ùå Pasta de destino n√£o encontrada: {pasta_destino}")
            print("üí° Execute primeiro o main.py para processar os arquivos")
            return []
        
        # Obter data de hoje para filtrar apenas arquivos de hoje
        from datetime import datetime
        data_hoje = datetime.now().strftime("%d_%m_%Y")
        print(f"üìÖ Filtrando arquivos da data: {data_hoje}")
        
        # BUSCAR ARQUIVOS SEQUENCIALMENTE (1, 2, 3, 4...)
        arquivos = []
        numero = 1
        
        print("üîç Buscando arquivos sequencialmente...")
        
        while True:
            nome_esperado = f"URA_AGUASG_{data_hoje}_{numero}.csv"
            caminho_esperado = os.path.join(pasta_destino, nome_esperado)
            
            if os.path.exists(caminho_esperado):
                arquivos.append(caminho_esperado)
                print(f"  ‚úÖ {numero:2d}. {nome_esperado}")
                numero += 1
            else:
                # Se n√£o encontrou o arquivo, verificar se h√° mais arquivos
                # Procurar por arquivos com n√∫meros maiores
                arquivos_restantes = []
                for i in range(numero, numero + 100):  # Verificar at√© 100 arquivos √† frente
                    nome_teste = f"URA_AGUASG_{data_hoje}_{i}.csv"
                    caminho_teste = os.path.join(pasta_destino, nome_teste)
                    if os.path.exists(caminho_teste):
                        arquivos_restantes.append((i, caminho_teste))
                
                if arquivos_restantes:
                    # Pular para o pr√≥ximo arquivo dispon√≠vel
                    proximo_numero, proximo_caminho = min(arquivos_restantes, key=lambda x: x[0])
                    print(f"  ‚è≠Ô∏è  Pulando para arquivo {proximo_numero}")
                    numero = proximo_numero
                else:
                    # N√£o h√° mais arquivos
                    break
        
        if not arquivos:
            print(f"‚ùå Nenhum arquivo URA_AGUASG de hoje ({data_hoje}) encontrado em: {pasta_destino}")
            print("üí° Execute primeiro o main.py para processar os arquivos")
            return []
        
        print(f"\nüìä Total de arquivos encontrados: {len(arquivos)}")
        
        print(f"üìÑ Encontrados {len(arquivos)} arquivos para importar:")
        
        for i, arquivo in enumerate(arquivos, 1):
            nome_arquivo = os.path.basename(arquivo)
            tamanho = os.path.getsize(arquivo)
            data_modificacao = os.path.getmtime(arquivo)
            data_formatada = datetime.fromtimestamp(data_modificacao).strftime("%d/%m/%Y %H:%M")
            print(f"  {i}. {nome_arquivo} ({tamanho:,} bytes) - {data_formatada}")
        
        return arquivos
    
    def fazer_upload_arquivo(self, caminho_arquivo):
        """Faz upload de um arquivo espec√≠fico"""
        print(f"üì§ Fazendo upload do arquivo: {os.path.basename(caminho_arquivo)}")
        
        try:
            # Localizar o input de arquivo
            input_arquivo = self.page.locator("#shipment_batch")
            
            if input_arquivo.count() == 0:
                print("‚ùå Input de arquivo n√£o encontrado!")
                return False
            
            print("  ‚úÖ Input de arquivo encontrado")
            
            # Fazer upload do arquivo
            print("  üìÅ Selecionando arquivo...")
            input_arquivo.set_input_files(caminho_arquivo)
            
            # Aguardar um pouco para o arquivo ser processado
            time.sleep(2)
            
            print("  ‚úÖ Arquivo selecionado com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao fazer upload: {e}")
            return False
    
    def clicar_iniciar_importacao(self):
        """Clica no bot√£o 'Iniciar importa√ß√£o'"""
        print("üöÄ Clicando em 'Iniciar importa√ß√£o'...")
        
        try:
            # Localizar o bot√£o de submit
            botao_importar = self.page.locator("#shipment_submit")
            
            if botao_importar.count() == 0:
                print("‚ùå Bot√£o 'Iniciar importa√ß√£o' n√£o encontrado!")
                return False
            
            print("  ‚úÖ Bot√£o encontrado")
            
            # Clicar no bot√£o
            botao_importar.click()
            print("  ‚úÖ Bot√£o clicado com sucesso!")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao clicar no bot√£o: {e}")
            return False
    
    def aguardar_importacao(self, minutos=3):
        """Aguarda a importa√ß√£o ser conclu√≠da"""
        print(f"‚è≥ Aguardando {minutos} minutos para importa√ß√£o...")
        
        for i in range(minutos):
            print(f"  ‚è∞ {i+1}/{minutos} minutos...")
            time.sleep(60)  # Aguardar 1 minuto
        
        print("  ‚úÖ Tempo de espera conclu√≠do!")
    
    def processar_todos_arquivos(self):
        """Processa todos os arquivos sequencialmente"""
        print("üîÑ PROCESSANDO TODOS OS ARQUIVOS")
        print("=" * 50)
        
        # Obter lista de arquivos
        arquivos = self.listar_arquivos_processados()
        
        if not arquivos:
            print("‚ùå Nenhum arquivo para processar!")
            return False
        
        print(f"üìä Total de arquivos para processar: {len(arquivos)}")
        
        # Processar cada arquivo
        for i, arquivo in enumerate(arquivos, 1):
            print(f"\n{'='*60}")
            print(f"üìÅ PROCESSANDO ARQUIVO {i}/{len(arquivos)}")
            print(f"üìÑ Arquivo: {os.path.basename(arquivo)}")
            print(f"{'='*60}")
            
            try:
                # 1. Fazer upload do arquivo
                if not self.fazer_upload_arquivo(arquivo):
                    print(f"‚ùå Falha no upload do arquivo {i}")
                    continue
                
                # 2. Clicar em iniciar importa√ß√£o
                if not self.clicar_iniciar_importacao():
                    print(f"‚ùå Falha ao iniciar importa√ß√£o do arquivo {i}")
                    continue
                
                # 3. Aguardar importa√ß√£o (exceto no √∫ltimo arquivo)
                if i < len(arquivos):
                    self.aguardar_importacao(3)
                    
                    # 4. Voltar para a p√°gina de importa√ß√£o para o pr√≥ximo arquivo
                    print("üîÑ Voltando para p√°gina de importa√ß√£o...")
                    if not self.encontrar_botao_importar():
                        print("‚ùå Falha ao voltar para importa√ß√£o")
                        break
                    
                    if not self.selecionar_fila_ura_aguas():
                        print("‚ùå Falha ao selecionar fila novamente")
                        break
                
                print(f"‚úÖ Arquivo {i} processado com sucesso!")
                
            except Exception as e:
                print(f"‚ùå Erro ao processar arquivo {i}: {e}")
                continue
        
        print(f"\nüéâ PROCESSAMENTO CONCLU√çDO!")
        print(f"üìä Total de arquivos processados: {len(arquivos)}")
        return True
    
    def fechar_navegador(self):
        """Fecha o navegador"""
        if self.context:
            self.context.close()
        if self.browser:
            self.browser.close()
        print("üîí Navegador fechado")

def executar_fluxo_completo():
    """Executa o fluxo completo de automa√ß√£o"""
    print("=" * 60)
    print("ü§ñ INICIANDO AUTOMA√á√ÉO DO ALIMENTADOR")
    print("=" * 60)
    
    alimentador = AlimentadorAutomatico()
    
    try:
        # 1. Iniciar navegador
        alimentador.iniciar_navegador(headless=False)
        
        # 2. Fazer login
        if not alimentador.fazer_login():
            print("‚ùå Falha no login. Encerrando...")
            return False
        
        # 3. Procurar bot√£o Importar
        if not alimentador.encontrar_botao_importar():
            print("‚ùå Bot√£o 'Importar' n√£o encontrado. Encerrando...")
            return False
        
        # 4. Selecionar fila URA-AGUAS
        if not alimentador.selecionar_fila_ura_aguas():
            print("‚ùå Falha ao selecionar fila 'URA-AGUAS'. Encerrando...")
            return False
        
        # 5. Listar arquivos dispon√≠veis
        arquivos = alimentador.listar_arquivos_processados()
        
        print("\n" + "=" * 60)
        print("‚úÖ FLUXO INICIAL CONCLU√çDO COM SUCESSO!")
        print("=" * 60)
        print("üìã Pr√≥ximos passos:")
        print("  1. Implementar upload de arquivos")
        print("  2. Configurar processamento autom√°tico")
        print("  3. Adicionar valida√ß√µes e tratamento de erros")
        
        # Manter navegador aberto para testes
        input("\n‚è∏Ô∏è  Pressione Enter para fechar o navegador...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o: {e}")
        return False
        
    finally:
        alimentador.fechar_navegador()

if __name__ == "__main__":
    executar_fluxo_completo()
