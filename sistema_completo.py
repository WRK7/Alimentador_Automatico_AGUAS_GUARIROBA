"""
Sistema Completo de Alimentador Autom√°tico
Integra o processamento de arquivos com a automa√ß√£o web
"""

import os
import sys
from datetime import datetime
from automacao import AlimentadorAutomatico
from main import processar_csv
from config import CREDENCIAIS, NAVEGADOR

class SistemaCompleto:
    def __init__(self):
        self.alimentador = AlimentadorAutomatico()
        self.arquivos_processados = []
    
    def executar_processamento(self):
        """Executa o processamento dos arquivos CSV"""
        print("=" * 60)
        print("üìä EXECUTANDO PROCESSAMENTO DE ARQUIVOS")
        print("=" * 60)
        
        try:
            processar_csv()
            print("‚úÖ Processamento conclu√≠do com sucesso!")
            return True
        except Exception as e:
            print(f"‚ùå Erro durante processamento: {e}")
            return False
    
    def executar_automatizacao(self):
        """Executa a automa√ß√£o web"""
        print("=" * 60)
        print("ü§ñ EXECUTANDO AUTOMA√á√ÉO WEB")
        print("=" * 60)
        
        try:
            # Iniciar navegador
            self.alimentador.iniciar_navegador(headless=NAVEGADOR["headless"])
            
            # Fazer login
            if not self.alimentador.fazer_login():
                print("‚ùå Falha no login")
                return False
            
            # Encontrar bot√£o importar
            if not self.alimentador.encontrar_botao_importar():
                print("‚ùå Bot√£o 'Importar' n√£o encontrado")
                return False
            
            # Selecionar fila URA-AGUAS
            if not self.alimentador.selecionar_fila_ura_aguas():
                print("‚ùå Falha ao selecionar fila 'URA-AGUAS'")
                return False
            
            # Listar arquivos dispon√≠veis
            self.arquivos_processados = self.alimentador.listar_arquivos_processados()
            
            print("‚úÖ Automa√ß√£o inicial conclu√≠da!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante automa√ß√£o: {e}")
            return False
        finally:
            # Manter navegador aberto para testes
            input("\n‚è∏Ô∏è  Pressione Enter para fechar o navegador...")
            self.alimentador.fechar_navegador()
    
    def executar_fluxo_completo(self):
        """Executa o fluxo completo: processamento + automa√ß√£o"""
        print("üöÄ INICIANDO SISTEMA COMPLETO")
        print("=" * 60)
        
        # 1. Processar arquivos
        if not self.executar_processamento():
            print("‚ùå Falha no processamento. Encerrando...")
            return False
        
        # 2. Executar automa√ß√£o
        if not self.executar_automatizacao():
            print("‚ùå Falha na automa√ß√£o. Encerrando...")
            return False
        
        print("\nüéâ SISTEMA COMPLETO EXECUTADO COM SUCESSO!")
        return True
    
    def executar_processamento_arquivos(self):
        """Executa o processamento autom√°tico de todos os arquivos"""
        print("=" * 60)
        print("üîÑ EXECUTANDO PROCESSAMENTO AUTOM√ÅTICO DE ARQUIVOS")
        print("=" * 60)
        
        try:
            # Iniciar navegador
            self.alimentador.iniciar_navegador(headless=NAVEGADOR["headless"])
            
            # Fazer login
            if not self.alimentador.fazer_login():
                print("‚ùå Falha no login")
                return False
            
            # Clicar em Importar
            if not self.alimentador.encontrar_botao_importar():
                print("‚ùå Falha ao clicar em Importar")
                return False
            
            # Selecionar fila URA-AGUAS
            if not self.alimentador.selecionar_fila_ura_aguas():
                print("‚ùå Falha ao selecionar fila URA-AGUAS")
                return False
            
            # Processar todos os arquivos
            if not self.alimentador.processar_todos_arquivos():
                print("‚ùå Falha no processamento de arquivos")
                return False
            
            print("‚úÖ Processamento autom√°tico conclu√≠do!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante processamento: {e}")
            return False
            
        finally:
            # Manter navegador aberto para verifica√ß√£o
            input("\n‚è∏Ô∏è  Pressione Enter para fechar o navegador...")
            self.alimentador.fechar_navegador()
    
    def executar_fluxo_completo_automatico(self):
        """Executa o fluxo completo: processamento + upload autom√°tico"""
        print("üöÄ INICIANDO SISTEMA COMPLETO AUTOM√ÅTICO")
        print("=" * 60)
        
        # 1. Processar arquivos CSV
        print("üìä ETAPA 1: Processando arquivos CSV...")
        if not self.executar_processamento():
            print("‚ùå Falha no processamento de arquivos. Encerrando...")
            return False
        
        print("\n‚úÖ Arquivos CSV processados com sucesso!")
        
        # 2. Inicializar navegador e fazer login
        print("\nüåê ETAPA 2: Inicializando navegador e fazendo login...")
        if not self.executar_automatizacao():
            print("‚ùå Falha na inicializa√ß√£o. Encerrando...")
            return False
        
        # 3. Processar todos os arquivos (upload autom√°tico)
        print("\nüì§ ETAPA 3: Fazendo upload autom√°tico de todos os arquivos...")
        if not self.alimentador.processar_todos_arquivos():
            print("‚ùå Falha no upload autom√°tico")
            return False
        
        print("\nüéâ SISTEMA COMPLETO AUTOM√ÅTICO EXECUTADO COM SUCESSO!")
        print("üìä Todos os arquivos foram processados e enviados automaticamente!")
        return True

def menu_principal():
    """Menu principal do sistema"""
    while True:
        print("\n" + "=" * 60)
        print("ü§ñ ALIMENTADOR AUTOM√ÅTICO - MENU PRINCIPAL")
        print("=" * 60)
        print("1. üìä Processar arquivos CSV apenas")
        print("2. ü§ñ Executar automa√ß√£o web apenas")
        print("3. üöÄ Executar fluxo completo (processamento + automa√ß√£o)")
        print("4. üìÅ Listar arquivos processados")
        print("5. üîÑ Processar todos os arquivos (upload autom√°tico)")
        print("6. üéØ SISTEMA COMPLETO AUTOM√ÅTICO (processa + upload)")
        print("7. ‚ùå Sair")
        print("=" * 60)
        
        opcao = input("Escolha uma op√ß√£o (1-7): ").strip()
        
        sistema = SistemaCompleto()
        
        if opcao == "1":
            sistema.executar_processamento()
        elif opcao == "2":
            sistema.executar_automatizacao()
        elif opcao == "3":
            sistema.executar_fluxo_completo()
        elif opcao == "4":
            sistema.alimentador.listar_arquivos_processados()
        elif opcao == "5":
            sistema.executar_processamento_arquivos()
        elif opcao == "6":
            sistema.executar_fluxo_completo_automatico()
        elif opcao == "7":
            print("üëã Encerrando sistema...")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")

if __name__ == "__main__":
    try:
        menu_principal()
    except KeyboardInterrupt:
        print("\n\nüëã Sistema encerrado pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
